      * uppercase identifiers and punctuation must be coded as shown.
      * lowercase identifiers indicate that user text must be coded.
 < >  * brackets indicate that the enclosed identifiers are optional.
  |   * a vertical bar separates mutually exclusive alternatives.
 { }  * braces enclose a set of alternatives, one of which is required.
 ...  * an elipsis denotes identifier(s) that may be coded repetitively.
      *
      * An in-line perform of one or more times:
           PERFORM < { identifier-1 | literal-1 } TIMES >
               imperative-statement-1 ...
           END-PERFORM
      *
      * An in-line perform until a condition is true:
           PERFORM < <WITH> TEST { BEFORE | AFTER } > UNTIL condition-1
               imperative-statement-1 ...
           END-PERFORM
      *
      * An in-line perform a variable number of times:
           PERFORM < <WITH> TEST { BEFORE | AFTER } >
             VARYING { identifier-2 | index-name-1 }
                FROM { identifier-3 | index-name-2 | literal-1 }
                  BY { identifier-4 | literal-2 }
               UNTIL condition-1
             < AFTER { identifier-5 | index-name-3 }
                FROM { identifier-6 | index-name-4 | literal-3 }
                  BY { identifier-7 | literal-4 }
               UNTIL condition-2 ... >
             imperative-statement-1 ...
           END-PERFORM
      *
      * An out-of-line perform of one or more times:
           PERFORM procedure-name-1 < THRU procedure-name-2 >
                   < { identifier-1 | literal-1 } TIMES >
      *
      * An out-of-line perform until a condition is true:
           PERFORM procedure-name-1 < THRU procedure-name-2 >
           < <WITH> TEST { BEFORE | AFTER } > UNTIL condition-1
      *
      * An out-of-line perform a variable number of times:
           PERFORM procedure-name-1 < THRU procedure-name-2 >
           < <WITH> TEST { BEFORE | AFTER } >
             VARYING { identifier-2 | index-name-1 }
                FROM { identifier-3 | index-name-2 | literal-1 }
                  BY { identifier-4 | literal-2 }
               UNTIL condition-1
             < AFTER { identifier-5 | index-name-3 }
                FROM { identifier-6 | index-name-4 | literal-3 }
                  BY { identifier-7 | literal-4 }
               UNTIL condition-2 ... >
      *

