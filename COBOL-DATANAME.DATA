      * uppercase identifiers and punctuation must be coded as shown.
      * lowercase identifiers indicate that user text must be coded.
 < >  * brackets indicate that the enclosed identifiers are optional.
  |   * a vertical bar separates mutually exclusive alternatives.
 { }  * braces enclose a set of alternatives, one of which is required.
 ...  * an elipsis denotes identifier(s) that may be coded repetitively.
      *
       level-number { data-name-1 | FILLER }
                                     < REDEFINES data-name-2 >
                                     < PIC<TURE> character-string>
                                     < VALUE <IS> literal >
                                     < SIGN IS {LEADING|TRAILING}
                                          < SEPARATE <CHARACTER> > >
                                     < JUSTIFIED <RIGHT> >
                                     < BLANK WHEN {ZERO|ZEROS|ZEROES} >
                                     < OCCURS { integer-2
                                              | integer-1 TO integer-2}
                                        <TIMES>
                                        <DEPENDING ON data-name-1>
                                        <ASCENDING KEY data-name-2 ...>
                                        <INDEXED BY index-name-1 ...> >
                                     <<USAGE <IS>> { DISPLAY
                                                   | {BINARY|COMP}
                                                   | {PACKED-DECIMAL
                                                   |   |COMP-3}
                                                   | PROCEDURE-POINTER
                                                   | POINTER
                                                   | INDEX } > .
      *
    Special level numbers:
      *
           66  data-name-1             RENAMES data-name-2
                                        < THRU data-name-3 > .
      *
           88  condition-name-1      { VALUE <IS> | VALUES <ARE> }
                                           literal-1 < THRU literal-2 >
                                           < ... > .
      *

